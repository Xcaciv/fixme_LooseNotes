@page "/login"
@using System.ComponentModel.DataAnnotations
@using Xcaciv.LooseNotes.Wasm.Shared.DTOs
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Login - Loose Notes</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm border-0 mt-5">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">Login</h2>
                    
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email or Username</label>
                            <InputText id="email" @bind-Value="loginModel.UserNameOrEmail" class="form-control" autocomplete="email" />
                            <ValidationMessage For="@(() => loginModel.UserNameOrEmail)" class="text-danger" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <InputText type="@(showPassword ? "text" : "password")" 
                                          id="password" 
                                          @bind-Value="loginModel.Password" 
                                          class="form-control" 
                                          autocomplete="current-password" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                    <i class="@(showPassword ? "oi oi-eye-closed" : "oi oi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>
                        
                        <div class="form-check mb-3">
                            <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                            <label class="form-check-label" for="rememberMe">Remember me</label>
                        </div>
                        
                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Logging in...</span>
                                }
                                else
                                {
                                    <span>Sign In</span>
                                }
                            </button>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <a href="register" class="text-decoration-none">Create account</a>
                            <a href="forgot-password" class="text-decoration-none">Forgot password?</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginUserDto loginModel = new();
    private bool isLoading = false;
    private string? errorMessage;
    private bool showPassword = false;
    
    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            var result = await AuthService.LoginAsync(loginModel);
            if (result.Success)
            {
                // Redirect to home page or intended page if there was a redirect
                var returnUrl = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "returnUrl");
                if (!string.IsNullOrEmpty(returnUrl))
                {
                    await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "returnUrl");
                    NavigationManager.NavigateTo(returnUrl);
                }
                else
                {
                    NavigationManager.NavigateTo("/");
                }
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
}