@page "/register"
@using System.ComponentModel.DataAnnotations
@using Xcaciv.LooseNotes.Wasm.Shared.DTOs
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Register - Loose Notes</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm border-0 mt-5">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">Create Account</h2>
                    
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" FormName="registerForm">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }
                        
                        @if (registrationSuccess)
                        {
                            <div class="alert alert-success" role="alert">
                                Registration successful! You can now <a href="login" class="alert-link">login</a>.
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" @bind-Value="registerModel.Email" class="form-control" autocomplete="email" />
                                <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText id="username" @bind-Value="registerModel.UserName" class="form-control" autocomplete="username" />
                                <ValidationMessage For="@(() => registerModel.UserName)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <div class="input-group">
                                    <InputText type="@(showPassword ? "text" : "password")" 
                                              id="password" 
                                              @bind-Value="registerModel.Password" 
                                              class="form-control" 
                                              autocomplete="new-password" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="@(showPassword ? "oi oi-eye-closed" : "oi oi-eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                                <div class="form-text">
                                    Password must be at least 8 characters and include uppercase, lowercase, number, and special character.
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <InputText type="password" 
                                         id="confirmPassword" 
                                         @bind-Value="registerModel.ConfirmPassword" 
                                         class="form-control" 
                                         autocomplete="new-password" />
                                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
                            </div>
                            
                            <div class="d-grid mb-3">
                                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Registering...</span>
                                    }
                                    else
                                    {
                                        <span>Create Account</span>
                                    }
                                </button>
                            </div>
                            
                            <div class="text-center">
                                <span>Already have an account? </span>
                                <a href="login" class="text-decoration-none">Login</a>
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterUserDto registerModel = new();
    private bool isLoading = false;
    private string? errorMessage;
    private bool showPassword = false;
    private bool registrationSuccess = false;
    
    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = null;
        
        try
        {
            var result = await AuthService.RegisterAsync(registerModel);
            if (result.Success)
            {
                registrationSuccess = true;
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
}