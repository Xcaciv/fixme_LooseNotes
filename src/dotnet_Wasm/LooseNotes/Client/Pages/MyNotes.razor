@page "/my-notes"
@using Xcaciv.LooseNotes.Wasm.Shared.DTOs
@using Xcaciv.LooseNotes.Wasm.Shared.Models
@using Xcaciv.LooseNotes.Wasm.Client.Services
@inject INoteService NoteService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>My Notes - Loose Notes</PageTitle>

<h1>My Notes</h1>

<div class="d-flex justify-content-between mb-3">
    <div>
        <button class="btn btn-primary" @onclick="CreateNewNote">
            <i class="bi bi-plus-circle"></i> Create New Note
        </button>
    </div>
    <div class="col-md-4">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search your notes..." 
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
            <button class="btn btn-outline-secondary" type="button" @onclick="SearchNotes">
                <i class="bi bi-search"></i> Search
            </button>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (notes == null || !notes.Any())
{
    <div class="alert alert-info">
        You don't have any notes yet. Create your first note to get started!
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var note in notes)
        {
            <div class="col">
                <div class="card h-100 @(note.IsPublic ? "border-success" : "")">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title mb-0">@note.Title</h5>
                            @if (note.IsPublic)
                            {
                                <span class="badge bg-success">Public</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Private</span>
                            }
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-three-dots-vertical"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton1">
                                <li><button class="dropdown-item" @onclick="() => ViewNote(note.Id)">View</button></li>
                                <li><button class="dropdown-item" @onclick="() => EditNote(note.Id)">Edit</button></li>
                                <li><button class="dropdown-item" @onclick="() => ShareNote(note.Id)">Share</button></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><button class="dropdown-item text-danger" @onclick="() => DeleteNote(note.Id)">Delete</button></li>
                            </ul>
                        </div>
                    </div>
                    <div class="card-body">
                        <p class="card-text">@(note.Content.Length > 150 ? note.Content.Substring(0, 150) + "..." : note.Content)</p>
                    </div>
                    <div class="card-footer text-muted d-flex justify-content-between">
                        <small>
                            @if (note.AttachmentCount > 0)
                            {
                                <span><i class="bi bi-paperclip"></i> @note.AttachmentCount</span>
                            }
                            @if (note.RatingCount > 0)
                            {
                                <span class="ms-2"><i class="bi bi-star-fill"></i> @note.AverageRating.ToString("0.0") (@note.RatingCount)</span>
                            }
                        </small>
                        <small>@FormatDate(note.UpdatedAt ?? note.CreatedAt)</small>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<NoteDto> notes = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotes();
    }

    private async Task LoadNotes()
    {
        isLoading = true;
        var response = await NoteService.GetMyNotesAsync();
        
        if (response.Success)
        {
            notes = response.Data;
        }
        
        isLoading = false;
    }

    private void CreateNewNote()
    {
        NavigationManager.NavigateTo("/note/new");
    }

    private void ViewNote(int id)
    {
        NavigationManager.NavigateTo($"/note/{id}");
    }

    private void EditNote(int id)
    {
        NavigationManager.NavigateTo($"/note/edit/{id}");
    }

    private async Task ShareNote(int id)
    {
        // This would typically open a dialog to share the note
        // For now, we'll just navigate to a share page
        NavigationManager.NavigateTo($"/note/share/{id}");
    }

    private async Task DeleteNote(int id)
    {
        // In a real application, we'd show a confirmation dialog first
        var result = await NoteService.DeleteNoteAsync(id);
        
        if (result.Success)
        {
            await LoadNotes();
        }
        else
        {
            // Show error message
        }
    }

    private void HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchNotes();
        }
        else
        {
            // Debounce search with a timer
            searchTimer?.Dispose();
            searchTimer = new Timer(async _ =>
            {
                await InvokeAsync(() =>
                {
                    if (!string.IsNullOrWhiteSpace(searchTerm) && searchTerm.Length >= 2)
                    {
                        SearchNotes();
                    }
                    else if (string.IsNullOrWhiteSpace(searchTerm))
                    {
                        LoadNotes();
                    }
                });
            }, null, 500, Timeout.Infinite);
        }
    }

    private async Task SearchNotes()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadNotes();
            return;
        }

        isLoading = true;
        var response = await NoteService.SearchNotesAsync(searchTerm);
        
        if (response.Success)
        {
            notes = response.Data;
        }
        
        isLoading = false;
    }

    private string FormatDate(DateTimeOffset date)
    {
        // If it's today, show the time
        if (date.Date == DateTimeOffset.Now.Date)
        {
            return $"Today at {date.ToString("h:mm tt")}";
        }
        // If it's yesterday, show "Yesterday"
        else if (date.Date == DateTimeOffset.Now.Date.AddDays(-1))
        {
            return "Yesterday";
        }
        // Otherwise show the date
        else
        {
            return date.ToString("MMM d, yyyy");
        }
    }
}