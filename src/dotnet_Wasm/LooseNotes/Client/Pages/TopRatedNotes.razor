@page "/top-rated"
@using Xcaciv.LooseNotes.Wasm.Shared.DTOs
@using Xcaciv.LooseNotes.Wasm.Client.Services
@inject INoteService NoteService
@inject NavigationManager NavigationManager

<PageTitle>Top Rated Notes - Loose Notes</PageTitle>

<h1>Top Rated Notes</h1>

<div class="lead mb-4">
    Discover the highest-rated notes from the community
</div>

@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (notes == null || !notes.Any())
{
    <div class="alert alert-info">
        No rated notes available yet. Be the first to rate a note!
    </div>
}
else
{
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="d-flex align-items-center mb-3">
                <h2 class="h4 mb-0 me-2">Top 10 Notes</h2>
                <div class="dropdown ms-auto">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                        <span>Show Top @count</span>
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <li><button class="dropdown-item @(count == 5 ? "active" : "")" @onclick="() => ChangeCount(5)">Top 5</button></li>
                        <li><button class="dropdown-item @(count == 10 ? "active" : "")" @onclick="() => ChangeCount(10)">Top 10</button></li>
                        <li><button class="dropdown-item @(count == 20 ? "active" : "")" @onclick="() => ChangeCount(20)">Top 20</button></li>
                        <li><button class="dropdown-item @(count == 50 ? "active" : "")" @onclick="() => ChangeCount(50)">Top 50</button></li>
                    </ul>
                </div>
            </div>
            
            <div class="list-group">
                @foreach (var note in notes)
                {
                    <div class="list-group-item list-group-item-action d-flex flex-column">
                        <div class="d-flex w-100 justify-content-between align-items-center">
                            <h5 class="mb-1">@note.Title</h5>
                            <div>
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= Math.Round(note.AverageRating))
                                    {
                                        <i class="bi bi-star-fill text-warning"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-star text-warning"></i>
                                    }
                                }
                                <span class="ms-1 badge bg-primary rounded-pill">@note.AverageRating.ToString("0.0")</span>
                            </div>
                        </div>
                        <p class="mb-1">@(note.Content.Length > 100 ? note.Content.Substring(0, 100) + "..." : note.Content)</p>
                        <div class="d-flex w-100 justify-content-between align-items-center mt-2">
                            <small class="text-muted">By @note.UserName • @note.RatingCount ratings</small>
                            <button class="btn btn-sm btn-primary" @onclick="() => ViewNote(note.Id)">View</button>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="h4 mb-0">Rating Stats</h3>
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <h4 class="h5">Average Rating Distribution</h4>
                        <div class="progress-stacked mb-3">
                            @{
                                var notesByRatingRanges = GetNoteRatingRanges();
                                string[] colors = new[] { "bg-danger", "bg-warning", "bg-info", "bg-primary", "bg-success" };
                                for (int i = 0; i < notesByRatingRanges.Length; i++)
                                {
                                    var percentage = notesByRatingRanges[i] * 100 / Math.Max(1, topRatedNotes.Count);
                                    <div class="progress" role="progressbar" style="width: @percentage%">
                                        <div class="progress-bar @colors[i]">@percentage.ToString("0")%</div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="d-flex justify-content-between">
                            <small>1 ★</small>
                            <small>2 ★</small>
                            <small>3 ★</small>
                            <small>4 ★</small>
                            <small>5 ★</small>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="h5">Most Active Users</h4>
                        <ul class="list-group">
                            @foreach (var user in GetTopRaters())
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @user.Key
                                    <span class="badge bg-primary rounded-pill">@user.Value ratings</span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<NoteDto> notes = new();
    private List<NoteDto> topRatedNotes = new();
    private bool isLoading = true;
    private int count = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopRatedNotes();
    }

    private async Task LoadTopRatedNotes()
    {
        isLoading = true;
        
        var response = await NoteService.GetTopRatedNotesAsync(count);
        
        if (response.Success)
        {
            notes = response.Data;
            
            // Load all top-rated notes for stats
            var allTopResponse = await NoteService.GetTopRatedNotesAsync(50); // Get 50 for stats
            if (allTopResponse.Success)
            {
                topRatedNotes = allTopResponse.Data;
            }
        }
        
        isLoading = false;
    }

    private void ViewNote(int id)
    {
        NavigationManager.NavigateTo($"/note/{id}");
    }
    
    private async Task ChangeCount(int newCount)
    {
        count = newCount;
        await LoadTopRatedNotes();
    }
    
    private int[] GetNoteRatingRanges()
    {
        int[] ranges = new int[5]; // 1-2, 2-3, 3-4, 4-5, 5
        
        foreach (var note in topRatedNotes)
        {
            if (note.AverageRating < 2)
                ranges[0]++;
            else if (note.AverageRating < 3)
                ranges[1]++;
            else if (note.AverageRating < 4)
                ranges[2]++;
            else if (note.AverageRating < 5)
                ranges[3]++;
            else
                ranges[4]++;
        }
        
        return ranges;
    }
    
    private Dictionary<string, int> GetTopRaters()
    {
        var raterCounts = new Dictionary<string, int>();
        
        foreach (var note in topRatedNotes)
        {
            if (note.Ratings == null)
                continue;
                
            foreach (var rating in note.Ratings)
            {
                if (!string.IsNullOrEmpty(rating.UserName))
                {
                    if (raterCounts.ContainsKey(rating.UserName))
                        raterCounts[rating.UserName]++;
                    else
                        raterCounts[rating.UserName] = 1;
                }
            }
        }
        
        // Get top 5 raters
        return raterCounts
            .OrderByDescending(x => x.Value)
            .Take(5)
            .ToDictionary(x => x.Key, x => x.Value);
    }
}